buildscript {
	ext {
		kotlinVersion = "1.3.10"
		springBootVersion = "2.1.1.RELEASE"
		springContent = "0.5.0"
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = "lt.markmerkk"
version = "1.0.1"
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlin:kotlin-reflect")

	implementation("org.springframework.boot:spring-boot-starter:$springBootVersion")
	implementation("org.springframework.boot:spring-boot-starter-data-rest:$springBootVersion")
	implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")

	testImplementation("org.jetbrains.kotlin:kotlin-test:1.1.50")
	testImplementation("org.jetbrains.kotlin:kotlin-test-junit:1.1.50")
	testImplementation("org.hamcrest:hamcrest-library:1.3")
	testImplementation("org.mockito:mockito-core:2.23.0")
	testImplementation("org.assertj:assertj-core:3.8.0")
	testImplementation("org.springframework.boot:spring-boot-test:$springBootVersion")
	testImplementation("com.nhaarman:mockito-kotlin:1.5.0")
}

bootJar {
	launchScript()
}
